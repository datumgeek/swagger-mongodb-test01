/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.2.0.0 (NJsonSchema v9.2.4.0) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, OpaqueToken } from '@angular/core';
import { Http, Headers, ResponseContentType, Response } from '@angular/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

@Injectable()
export class Client {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "/rest";
    }

    /**
     * Get all planets
     * @take number of planets to return
     * @skip number of planets to skip
     * @sort sort string in ag-grid stringified sort criteria
     * @return unexpected error
     */
    listPlanets(take: number, skip: number, sort: string): Observable<Planet[] | null> {
        let url_ = this.baseUrl + "/planets?";
        if (take !== undefined)
            url_ += "take=" + encodeURIComponent("" + take) + "&";
        if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (sort !== undefined)
            url_ += "sort=" + encodeURIComponent("" + sort) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processListPlanets(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processListPlanets(response_);
                } catch (e) {
                    return <Observable<Planet[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<Planet[]>><any>Observable.throw(response_);
        });
    }

    protected processListPlanets(response: Response): Observable<Planet[] | null> {
        const status = response.status;

        if (status === 200) {
            const _responseText = response.text();
            let result200: Planet[] | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Planet.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<Planet[] | null>(<any>null);
    }
}

export class Moon implements IMoon {
    id?: number | undefined;
    name: string;
    orderFromPlanet: number;
    size?: number | undefined;

    constructor(data?: IMoon) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.orderFromPlanet = data["orderFromPlanet"];
            this.size = data["size"];
        }
    }

    static fromJS(data: any): Moon {
        let result = new Moon();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["orderFromPlanet"] = this.orderFromPlanet;
        data["size"] = this.size;
        return data;
    }
}

export interface IMoon {
    id?: number | undefined;
    name: string;
    orderFromPlanet: number;
    size?: number | undefined;
}

export class Planet implements IPlanet {
    id?: number | undefined;
    name: string;
    orderFromSun: number;
    size?: number | undefined;
    moons?: Moon[] | undefined;

    constructor(data?: IPlanet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.orderFromSun = data["orderFromSun"];
            this.size = data["size"];
            if (data["moons"] && data["moons"].constructor === Array) {
                this.moons = [];
                for (let item of data["moons"])
                    this.moons.push(Moon.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Planet {
        let result = new Planet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["orderFromSun"] = this.orderFromSun;
        data["size"] = this.size;
        if (this.moons && this.moons.constructor === Array) {
            data["moons"] = [];
            for (let item of this.moons)
                data["moons"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPlanet {
    id?: number | undefined;
    name: string;
    orderFromSun: number;
    size?: number | undefined;
    moons?: Moon[] | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    result: any;

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}

function throwException(message: string, status: number, response: string, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, null));
}

function blobToText(blob: Blob): Observable<string> {
    return new Observable<string>((observer: any) => {
        let reader = new FileReader();
        reader.onload = function() {
            observer.next(this.result);
            observer.complete();
        }
        reader.readAsText(blob);
    });
}
